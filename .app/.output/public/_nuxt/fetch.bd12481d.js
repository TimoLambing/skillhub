import{c as k,h as r,bq as F,v as $,br as q,bc as x}from"./entry.71fd4e1e.js";function U(c,o,h){const[t={},u]=typeof o=="string"?[{},o]:[o,h],e=k(()=>{let a=c;return typeof a=="function"&&(a=a()),r(a)}),s=t.key||F([u,r(t.method)?.toUpperCase()||"GET",r(t.baseURL),typeof e.value=="string"?e.value:"",r(t.params||t.query),r(t.headers)]);if(!s||typeof s!="string")throw new TypeError("[nuxt] [useFetch] key must be a string: "+s);if(!c)throw new Error("[nuxt] [useFetch] request is missing.");const l=s===u?"$f"+s:s;if(!t.baseURL&&typeof e.value=="string"&&e.value.startsWith("//"))throw new Error('[nuxt] [useFetch] the request URL must not start with "//".');const{server:p,lazy:y,default:d,transform:b,pick:m,watch:f,immediate:v,getCachedData:w,deep:g,...D}=t,i=$({...q,...D,cache:typeof t.cache=="boolean"?void 0:t.cache}),_={server:p,lazy:y,default:d,transform:b,pick:m,immediate:v,getCachedData:w,deep:g,watch:f===!1?[]:[i,e,...f||[]]};let n;return x(l,()=>(n?.abort?.(),n=typeof AbortController<"u"?new AbortController:{},typeof e.value=="string"&&e.value.startsWith("/"),(t.$fetch||globalThis.$fetch)(e.value,{signal:n.signal,...i})),_)}export{U as u};
