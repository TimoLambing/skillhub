// ROLLUP_NO_REPLACE 
 const _2_panels = "{\"parsed\":{\"_path\":\"/documentation/guides/panels\",\"_dir\":\"guides\",\"_draft\":false,\"_partial\":false,\"_locale\":\"\",\"title\":\"Panels\",\"description\":\"Tairo panels allow to display additional data and details in animated left or right drawers.\",\"components\":[\"TairoPanels\"],\"icon\":{\"src\":\"/img/illustrations/components/logo-icon.svg\",\"srcDark\":\"/img/illustrations/components/logo-icon.svg\"},\"body\":{\"type\":\"root\",\"children\":[{\"type\":\"element\",\"tag\":\"doc-component-demo\",\"props\":{\"title\":\"Register panels\"},\"children\":[{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"In order to use panels, you need to create a component in \"},{\"type\":\"element\",\"tag\":\"code\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\".app/components/global\"}]},{\"type\":\"text\",\"value\":\" folder to make them available in your app.\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-vue\"],\"code\":\"<script setup lang=\\\"ts\\\">\\n// You can add props to the component\\nconst props = withDefaults(\\n  defineProps<{\\n    color?: 'default' | 'primary' | 'secondary'\\n    projects?: any[]\\n  }>(),\\n  {\\n    color: 'default',\\n    projects: () => [],\\n  },\\n)\\n\\n// Eiter define events\\nconst emits = defineEmits<{\\n  (event: 'save', info: any): void\\n}>()\\n\\n// And use panels utils\\nconst { close } = usePanels()\\n</script>\\n\\n<template>\\n  <BaseButtons>\\n    <BaseButton @click=\\\"() => emits('save', { selected: props.projects[0] })\\\">Save</BaseButton>\\n    <BaseButton @click=\\\"() => close()\\\">Cancel</BaseButton>\\n  </BaseButtons>\\n</template>\\n\",\"filename\":\".app/components/global/PanelComponent.vue\",\"language\":\"vue\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\"<script setup lang=\\\"ts\\\">\\n// You can add props to the component\\nconst props = withDefaults(\\n  defineProps<{\\n    color?: 'default' | 'primary' | 'secondary'\\n    projects?: any[]\\n  }>(),\\n  {\\n    color: 'default',\\n    projects: () => [],\\n  },\\n)\\n\\n// Eiter define events\\nconst emits = defineEmits<{\\n  (event: 'save', info: any): void\\n}>()\\n\\n// And use panels utils\\nconst { close } = usePanels()\\n</script>\\n\\n<template>\\n  <BaseButtons>\\n    <BaseButton @click=\\\"() => emits('save', { selected: props.projects[0] })\\\">Save</BaseButton>\\n    <BaseButton @click=\\\"() => close()\\\">Cancel</BaseButton>\\n  </BaseButtons>\\n</template>\\n\"}]}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"Then you need to\\nregister the panel in your \"},{\"type\":\"element\",\"tag\":\"code\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\".app/app.config.ts\"}]},{\"type\":\"text\",\"value\":\" file.\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-ts\"],\"code\":\"export default defineAppConfig({\\n  tairo: {\\n    panels: [\\n      {\\n        // Unique name of the panel, used to open it\\n        name: 'panel-name',\\n        component: { \\n          // The component name of the panel and default props\\n          name: 'PanelComponent', \\n          props: {\\n            color: 'primary',\\n          } \\n        },\\n        // The position of the panel\\n        position: 'left',\\n        // Whether to show an overlay when the panel is open\\n        overlay: false,\\n      },\\n    ],\\n  },\\n})\\n\",\"language\":\"ts\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\"export default defineAppConfig({\\n  tairo: {\\n    panels: [\\n      {\\n        // Unique name of the panel, used to open it\\n        name: 'panel-name',\\n        component: { \\n          // The component name of the panel and default props\\n          name: 'PanelComponent', \\n          props: {\\n            color: 'primary',\\n          } \\n        },\\n        // The position of the panel\\n        position: 'left',\\n        // Whether to show an overlay when the panel is open\\n        overlay: false,\\n      },\\n    ],\\n  },\\n})\\n\"}]}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"Once you have registered the panel, you can open it using the \"},{\"type\":\"element\",\"tag\":\"code\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"open\"}]},{\"type\":\"text\",\"value\":\" function from the \"},{\"type\":\"element\",\"tag\":\"code\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"usePanels\"}]},{\"type\":\"text\",\"value\":\" composable.\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-vue\"],\"code\":\"<script setup lang=\\\"ts\\\">\\nconst { open, close } = usePanels()\\n\\nfunction onSomeEvent() {\\n  // close all panels first\\n  close()\\n\\n  // open a panel by name\\n  open('panel-name', {\\n    // panel component props\\n    color: 'secondary',\\n    projects: [\\n      { name: 'Project 1' },\\n      { name: 'Project 2' },\\n      { name: 'Project 3' },\\n      { name: 'Project 4' },\\n    ],\\n    // panel component events, should be prefixed with `on`\\n    onSave (info) {\\n      console.log(info)\\n      // logs { selected: { name: 'Project 1' }\\n    }\\n  })\\n}\\n</script>\\n\",\"language\":\"vue\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\"<script setup lang=\\\"ts\\\">\\nconst { open, close } = usePanels()\\n\\nfunction onSomeEvent() {\\n  // close all panels first\\n  close()\\n\\n  // open a panel by name\\n  open('panel-name', {\\n    // panel component props\\n    color: 'secondary',\\n    projects: [\\n      { name: 'Project 1' },\\n      { name: 'Project 2' },\\n      { name: 'Project 3' },\\n      { name: 'Project 4' },\\n    ],\\n    // panel component events, should be prefixed with `on`\\n    onSave (info) {\\n      console.log(info)\\n      // logs { selected: { name: 'Project 1' }\\n    }\\n  })\\n}\\n</script>\\n\"}]}]}]},{\"type\":\"element\",\"tag\":\"doc-component-demo\",\"props\":{\"title\":\"Activity panel\",\"demo\":\"#examples/panel/activity.vue\"},\"children\":[{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"Panels can be opened using the \"},{\"type\":\"element\",\"tag\":\"code\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"open\"}]},{\"type\":\"text\",\"value\":\" function. You can define the panels you use inside the \"},{\"type\":\"element\",\"tag\":\"code\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"app.config.ts\"}]},{\"type\":\"text\",\"value\":\" file in your project. You can also pass \"},{\"type\":\"element\",\"tag\":\"code\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"props\"}]},{\"type\":\"text\",\"value\":\" to panels using the same function. Click below for an activity panel example.\"}]}]},{\"type\":\"element\",\"tag\":\"doc-component-demo\",\"props\":{\"title\":\"Language panel\",\"demo\":\"#examples/panel/language.vue\"},\"children\":[{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"Panels can be opened using the \"},{\"type\":\"element\",\"tag\":\"code\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"open\"}]},{\"type\":\"text\",\"value\":\" function. You can define the panels you use inside the \"},{\"type\":\"element\",\"tag\":\"code\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"app.config.ts\"}]},{\"type\":\"text\",\"value\":\" file in your project. You can also pass \"},{\"type\":\"element\",\"tag\":\"code\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"props\"}]},{\"type\":\"text\",\"value\":\" to panels using the same function. Click below for a language panel example.\"}]}]},{\"type\":\"element\",\"tag\":\"doc-component-demo\",\"props\":{\"title\":\"Search panel\",\"demo\":\"#examples/panel/search.vue\"},\"children\":[{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"Panels can be opened using the \"},{\"type\":\"element\",\"tag\":\"code\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"open\"}]},{\"type\":\"text\",\"value\":\" function. You can define the panels you use inside the \"},{\"type\":\"element\",\"tag\":\"code\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"app.config.ts\"}]},{\"type\":\"text\",\"value\":\" file in your project. You can also pass \"},{\"type\":\"element\",\"tag\":\"code\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"props\"}]},{\"type\":\"text\",\"value\":\" to panels using the same function. Click below for a search panel example.\"}]}]},{\"type\":\"element\",\"tag\":\"doc-component-demo\",\"props\":{\"title\":\"Task panel\",\"demo\":\"#examples/panel/task.vue\"},\"children\":[{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"Panels can be used to show dynamic data using \"},{\"type\":\"element\",\"tag\":\"code\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"props\"}]},{\"type\":\"text\",\"value\":\". Pass props to a panel using the  props object as the second function parameter:\"}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"open('name', { key: value })\"}]}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"Click below for a task panel example.\"}]}]}],\"toc\":{\"title\":\"\",\"searchDepth\":2,\"depth\":2,\"links\":[]}},\"_type\":\"markdown\",\"_id\":\"content:documentation:50.guides:2.panels.md\",\"_source\":\"content\",\"_file\":\"documentation/50.guides/2.panels.md\",\"_extension\":\"md\"},\"hash\":\"68TbCwjKZj\"}";

export { _2_panels as default };
//# sourceMappingURL=2.panels.mjs.map
